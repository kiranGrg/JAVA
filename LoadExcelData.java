


import java.io.File;
import java.sql.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
//import javax.swing.d

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoadExcelData.java
 *
 * Created on Mar 7, 2012, 3:09:53 PM
 */
/**
 *
 * @author kiranroma
 */
public class LoadExcelData extends javax.swing.JFrame {

    JTable table;
    JScrollPane scrollpane;
    DefaultTableModel modal;
    String[][] values = null;
    Object[] rows = null;
    int row, col, status;
    private String query = null;
    private Connection con = null;
    private ResultSet rs = null;
    private PreparedStatement pst = null;
    private String fileName = null;
    public String path = null;
    private File file = null;

    /** Creates new form LoadExcelData */
    public LoadExcelData(int i) {
        status = i;
        initComponents();
        modal = new DefaultTableModel();
        table = new JTable(modal);
        if (status == 1) {
            modal.addColumn("S.No");
            //modal.addColumn("Term");
            modal.addColumn("Name");
            //modal.addColumn("Grade");
            modal.addColumn("Roll No.");
            modal.addColumn("Report");
            modal.addColumn("Contact No.");
            //modal.addColumn("Date");
            lblheader.setText("Exam Report Loading");

            lblgrade = new JLabel("Grade");
            getContentPane().add(lblgrade);
            lblgrade.setBounds(200, 110, 40, 20);
            cmbgrade = new JComboBox();
            getContentPane().add(cmbgrade);//150, 105, 25, 25//50, 100, 90, 30//10, 110, 40, 20
            cmbgrade.setBounds(245, 100, 90, 30);
            cmbgrade.setModel(new DefaultComboBoxModel(new String[]{"Select", "X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10"}));

            lblterm = new JLabel("Terms");
            getContentPane().add(lblterm);
            lblterm.setBounds(355, 110, 40, 20);
            cmbterm = new JComboBox();
            getContentPane().add(cmbterm);
            cmbterm.setBounds(405, 100, 90, 30);
            cmbterm.setModel(new DefaultComboBoxModel(new String[]{"Select", "First", "Second", "Third"}));
        } else if (status == 2) {
            modal.addColumn("S.No");
            modal.addColumn("Description");
            modal.addColumn("Type");
            modal.addColumn("Vender");
            modal.addColumn("Buyer");
            modal.addColumn("Amount");
            modal.addColumn("Contact No.");
            //modal.addColumn("Date");
            lblheader.setText("Expense Report Loading");


        }

        int v = ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;
        int h = ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;

        scrollpane = new JScrollPane(table, v, h);
        getContentPane().add(scrollpane);
        scrollpane.setBounds(5, 138, 590, 200);
        txtpath.getDocument().addDocumentListener(new MyDocumentListener());


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtpath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        lblheader = new javax.swing.JLabel();
        txtdate = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        getContentPane().setLayout(null);
        getContentPane().add(txtpath);
        txtpath.setBounds(5, 65, 490, 30);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(510, 65, 80, 30);

        jButton2.setText("Import");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(180, 400, 100, 30);

        jButton3.setText("Add to Database");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(310, 400, 140, 30);

        lblheader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblheader);
        lblheader.setBounds(0, 0, 600, 60);
        getContentPane().add(txtdate);
        txtdate.setBounds(50, 100, 90, 30);

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(150, 105, 25, 25);

        jLabel2.setText("Date:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 110, 40, 20);

        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(480, 400, 90, 30);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-617)/2, (screenSize.height-481)/2, 617, 481);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int status = fc.showOpenDialog(this);
        file = fc.getSelectedFile();
        path = file.getAbsolutePath();
        fileName = file.getName();
        if (file != null && status == JFileChooser.APPROVE_OPTION) {
            //if(filestatus == 0){
            txtpath.setText(path);
            //System.out.println(file.getName().toString());
            //}
//            else{
//                txtpath.setText("");
//                filestatus = 0;
//            }

        } else if (file == null || status == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(this, "Please Select a file");
        }
//        String[] nameArr = fileName.split(".xls");
//        if()

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String filepath = txtpath.getText().trim(), date = txtdate.getText();
        if (filepath.equals("") || date.equals("")) {
            JOptionPane.showMessageDialog(this, "Please Provide the full Info");
        } else {
            if (modal.getRowCount() > 1) {
                for (int i = modal.getRowCount(); i > 0; i--) {
                    modal.removeRow(i);
                }
            }
            ReadExcel re = null;
            try{
            re = new ReadExcel(txtpath.getText());
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
            //re.setInputFile();


            try {
                row = re.getRow();
                col = re.getCol();
                values = re.read();
                System.out.println(row + "           " + col);
                rows = new Object[col];
                int i;
                for (int j = 0; j < row - 1; j++) {
                    for (i = 0; i < col; i++) {
                        if (i == 1) {
                            String name = getName(values[i][j]);
                            rows[i] = name;
                            values[i][j] = name;
                        } else {
                            rows[i] = values[i][j];

                        }
                        System.out.println(rows[i]);
                    }
                    //rows[i] = txtdate.getText();
                    modal.addRow(rows);
                }
//                for(int k = 0; k <3; k++)
//                {
//                    for(int l = 0; l<4; l++)
//                    {
//                        System.out.print(values[k][l]+"  ");
//                    }
//                    System.out.println();
//                }

            } catch (Exception e) {
                System.out.println("Error in reading data from .xls file");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private String getName(String name) {
        int len1 = 0, len2 = 0, i = 0, j = 0;
        String sname = "", s1 = "", s2 = "", s3 = "", s4 = "";


        i = name.indexOf(" ");
        if (i > 0) {
            len1 = name.length();
            s1 = name.substring(0, i);
            sname += s1 + " ";
            s2 = (name.substring(i, len1)).trim();

            j = s2.indexOf(" ");
            if (j > 0) {
                len2 = s2.length();
                s3 = s2.substring(0, j);
                sname += s3 + " ";
                s4 = (s2.substring(j, len2)).trim();
                sname += s4 + " ";
            } else {
                sname += s2;
            }
        }

        return (sname);
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DatePicker dp = new DatePicker();
        txtdate.setText(dp.setPickedDate());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String filepath = txtpath.getText().trim(), date = txtdate.getText();
        if (filepath.equals("") || date.equals("")) {
            JOptionPane.showMessageDialog(this, "Please Provide the full Info");
        } else {
            if (status == 1) {
                String grade = (String) cmbgrade.getSelectedItem();
                int term = cmbterm.getSelectedIndex();
                if (!grade.equals("Select") && term > 0) {
                    insertValuesExam(date, grade, term);
                } else {
                    JOptionPane.showMessageDialog(this, "Please Provide the full Info");
                }
            } else if (status == 2) {
                insertValuesExpense(date);
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    protected void insertValuesExam(String date, String grade, int term) {
        //Connection con;

        int id = 0;
        Statement st = null;
        int statusUpdate = 0, check;
        dbConnect db = new dbConnect();
        con = db.Connect();
        if (con != null) {
            //if(!term.equalsIgnoreCase("Third")){
            try {
                query = "INSERT INTO examterm VALUES(null,?,?,?,now(),?)";
                pst = con.prepareStatement(query);
                pst.setString(1, grade);
                pst.setInt(2, term);
                pst.setString(3, date);
                pst.setString(4, fileName);
                int state = pst.executeUpdate();
                if (state > 0) {
                    //if (!term.equalsIgnoreCase("Third")) {
                    try {
                        //if (!term.equalsIgnoreCase("3")) {
                        st = con.createStatement();
                        rs = st.executeQuery("SELECT id FROM examterm ORDER BY id DESC LIMIT 1");
                        if (rs.next()) {
                            id = rs.getInt("id");
                            System.out.println(id);
                        }
                        query = "INSERT INTO exam VALUES ('" + id + "',(SELECT studentId FROM student_info WHERE name = ? AND grade = ? AND roll = ?),"
                                + "?,?,?,(SELECT contact FROM student_info WHERE name = ? AND grade = ? AND roll = ?))";
                        //System.console();
//                        } else {
//                            query = "INSERT INTO student_record VALUES (null,(SELECT studentId FROM student_info WHERE name = ? AND grade = ? AND roll = ?),?,'"
//                                    + grade + "',?,now(),?,(SELECT contact FROM student_info WHERE name = ? AND grade = ? AND roll = ?))";
//                        }
                        pst = con.prepareStatement(query);
                        for (int j = 0; j < row - 1; j++) {
                            //System.out.println(values[1][j]+" "+values[2][j]+" "+values[3][j]+" "+values[4][j]);
                            pst.setString(1, values[1][j]);
                            System.out.println(values[1][j]);
                            pst.setString(2, grade);
                            pst.setInt(3, Integer.parseInt(values[2][j]));
                            System.out.println(values[2][j]);
                            pst.setString(4, values[1][j]);
                            pst.setInt(5, Integer.parseInt(values[2][j]));
                            if (values[3][j].equalsIgnoreCase("f")) {
                                pst.setString(6, "f");
                            } else {
                                pst.setString(6, "p");
                            }
                            System.out.println(values[3][j]);
                            pst.setString(7, values[1][j]);
                            pst.setString(8, grade);
                            pst.setInt(9, Integer.parseInt(values[2][j]));
                            check = pst.executeUpdate();
                            if (check == 0) {
                                statusUpdate = 1;
                                break;
                            }
                            System.out.println(j + 1);
                            System.out.println(query);
                        }
                        if (statusUpdate == 0) {
                            JOptionPane.showMessageDialog(this, "Uploaded to Database Successfully");
                        } else if (statusUpdate == 1) {
                            JOptionPane.showMessageDialog(this, "Error During Uploading data to Database");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error :" + e.getMessage());
                        int deletion = deleteTermFile(id);
                        if (deletion > 0) {
                            JOptionPane.showMessageDialog(this, "successfully recoverd database activities");
                        } else {
                            JOptionPane.showMessageDialog(this, "Couldn't successfully recoverd database activities");
                        }

                    } finally {
                        db.Close(con);
                    }
                    //}
                } else {
                    JOptionPane.showMessageDialog(this, "Insertion in exam term failed");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error :" + e.getMessage());
            } finally {
                db.Close(con);
            }
            // }
        } else {
            JOptionPane.showMessageDialog(this, "Error in Connection");
        }
    }

    private int deleteTermFile(int id) {
        try {
            Statement stm = con.createStatement();
            String filename = file.getName().toString();
            System.out.println(filename);
            String Query = "DELETE FROM examterm WHERE file = '" + filename + "'";
            int status = stm.executeUpdate(Query);
            if (status > 0) {
                Query = "DELETE FROM exam WHERE id = '" + id + "'";
                return stm.executeUpdate(Query);
            } else {
                return 0;
            }

        } catch (Exception e) {
            return 0;
        }
    }

    protected void insertValuesExpense(String date) {
        int statusUpdate = 0, check;
        Statement st = null;
        dbConnect db = new dbConnect();
        con = db.Connect();
        if (con != null) {
            try {
                query = "INSERT INTO expensefiles VALUES (null,?,?)";
                pst = con.prepareStatement(query);
                pst.setString(1, fileName);
                pst.setString(2, date);
                int state = pst.executeUpdate();
                if (state > 0) {
                    try {
                        st = con.createStatement();
                        rs = st.executeQuery("SELECT id FROM expensefiles ORDER BY id DESC LIMIT 1");
                        int id = 0;
                        if (rs.next()) {
                            id = rs.getInt("id");
                        }
                        query = "INSERT INTO expenserecord VALUES ('" + id + "',?,?,?,?,?,?,?,?)";
                        pst = con.prepareStatement(query);
                        for (int j = 0; j < row - 1; j++) {
                            pst.setString(1, values[1][j]);
                            pst.setString(2, values[2][j]);
                            pst.setString(3, values[3][j]);
                            pst.setString(4, values[4][j]);
                            pst.setString(5, values[5][j]);
                            pst.setString(6, values[6][j]);
                            pst.setString(7, values[7][j]);
                            if (values[8][j].equalsIgnoreCase("cash")) {
                                pst.setString(8, "k");
                            } else if (values[8][j].equalsIgnoreCase("cheque")) {
                                pst.setString(8, "c");
                            }
                            check = pst.executeUpdate();
                            if (check == 0) {
                                statusUpdate = 1;
                                break;
                            }
                        }
                        if (statusUpdate == 0) {
                            JOptionPane.showMessageDialog(this, "Data uploaded succesfully to database");
                        } else if (statusUpdate == 1) {
                            JOptionPane.showMessageDialog(this, "Error in loading data to Database");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "ERROR : " + e.getMessage());
                    } finally {
                        db.Close(con);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Error during insertion in expenseFiles");
                }

            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error in Connection");
        }

    }

    class MyDocumentListener implements DocumentListener {

        private Statement stm = null;
        private Connection con = null;
//        private String query = null;
//        private String path = null;
//        public MyDocumentListener(String file){
//        path = file;
//        //this.option = option;
//        }

        public void update(DocumentEvent de) {
            Document doc = de.getDocument();
            int length = doc.getLength();
            String str = null;
            try {
                str = doc.getText(0, length);
                File file = new File(str);
                str = file.getName();
            } catch (BadLocationException ex) {
            }

            dbConnect db = new dbConnect();
            con = db.Connect();
            if (con != null) {
                if (status == 1) {
                    query = "SELECT * FROM examterm WHERE file = '" + str + "'";
                } else {
                    query = "SELECT * FROM expensefiles WHERE file = '" + str + "'";
                }
                try {
                    //query = "SELECT * FROM examterm WHERE file = '"+str+"'";
                    stm = con.createStatement();
                    rs = stm.executeQuery(query);
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(null, "Please Select Corret file. This is already been uploaded");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error in Database : " + e, "Display", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Unidentified Error : " + e, "Display", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Error in Connection");
            }
        }

        public void changedUpdate(DocumentEvent de) {
            // text was changed
            update(de);

        }

        public void removeUpdate(DocumentEvent de) {
            update(de);
        }

        public void insertUpdate(DocumentEvent de) {
            update(de);
        }
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new LoadExcelData(1).setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblheader;
    private javax.swing.JTextField txtdate;
    private javax.swing.JTextField txtpath;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JComboBox cmbgrade;
    private javax.swing.JComboBox cmbterm;
    private JLabel lblgrade;
    private JLabel lblterm;
}
