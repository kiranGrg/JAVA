

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FeeOFIndAll.java
 *
 * Created on Feb 24, 2012, 7:25:17 PM
 */
/**
 *
 * @author kiranroma
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.BorderFactory.*;
import java.sql.*;
//scrollPane.setBounds(4, 105, 550, 220);
public final class FeeOFIndAll extends javax.swing.JFrame {

    private DefaultTableModel model;
    private JTable table;
    private JScrollPane scrollPane;
    private ButtonGroup btg;
    private String query = null;
    float fee = 0.0f;
    /** Creates new form FeeOFIndAll */
    private String studentId = null, grade = null, nam = null, roll = null;

    public FeeOFIndAll(String stu_id, String name1, String grade) {

        studentId = stu_id;
        nam = name1;
        this.grade = grade;

        initComponents();
        lblid.setText(studentId.toUpperCase());
        lblname.setText(name1.toUpperCase());
        pnl1.setBorder(BorderFactory.createLineBorder(java.awt.Color.BLACK));
        model = new DefaultTableModel();
        table = new JTable(model);
        table.setFillsViewportHeight(true);
        model.addColumn("S.NO");
        model.addColumn("Grade");
        model.addColumn("Amount");
        model.addColumn("Date");
        model.addColumn("Report");
        model.addColumn("Pay Status");
        model.addColumn("Part. Amount");
        model.addColumn("late P. Day");
        int h = ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
        int v = ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;
        scrollPane = new JScrollPane(table, v, h);
        pnl1.add(scrollPane);
        scrollPane.setBounds(5, 180, 735, 285);
        btg = new ButtonGroup();
        btg.add(all);
        btg.add(cur);
        all.setSelected(true);
        currentPaymentReport(2);
    }

    protected void currentPaymentReport(int status) {
        //System.out.println(model.getRowCount());
        Student s = new Student();
        switch (status) {
            case 1:
                query = "SELECT grade,amount,dpay,record,fstatus,pamount,ldate FROM fee WHERE studentId = '" + studentId + "' AND date_format(dpay,'%y') = date_format(now(),'%y')";
                break;
            case 2:
                query = "SELECT grade,amount,dpay,record,fstatus,pamount,ldate FROM fee WHERE studentId = '" + studentId + "'";
                break;
        }
        //s.Connect();
        boolean report = s.examFeeIndAllReport("fee", model, query);
        s.Close();
        if (!report) {
            JOptionPane.showMessageDialog(this, "No Data Found or Fee has been paid yet");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrint = new javax.swing.JButton();
        pnl1 = new javax.swing.JPanel();
        header = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblid = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cur = new javax.swing.JRadioButton();
        all = new javax.swing.JRadioButton();
        btnPay = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        getContentPane().setLayout(null);

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrint);
        btnPrint.setBounds(180, 480, 90, 30);

        pnl1.setLayout(null);

        header.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14));
        header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        header.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fee2.png"))); // NOI18N
        pnl1.add(header);
        header.setBounds(65, 0, 610, 60);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel2.setText("ID. No:");
        pnl1.add(jLabel2);
        jLabel2.setBounds(30, 130, 50, 20);

        lblid.setFont(new java.awt.Font("Tahoma", 0, 12));
        pnl1.add(lblid);
        lblid.setBounds(100, 130, 110, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel4.setText("Name:");
        pnl1.add(jLabel4);
        jLabel4.setBounds(30, 70, 50, 20);

        lblname.setFont(new java.awt.Font("Tahoma", 0, 12));
        pnl1.add(lblname);
        lblname.setBounds(100, 70, 140, 20);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Specify Date"));
        jPanel1.setForeground(new java.awt.Color(255, 255, 204));
        jPanel1.setLayout(null);

        cur.setText("Current Year");
        cur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curActionPerformed(evt);
            }
        });
        jPanel1.add(cur);
        cur.setBounds(190, 30, 100, 25);

        all.setText("Till Now");
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });
        jPanel1.add(all);
        all.setBounds(60, 30, 70, 25);

        btnPay.setText("Recent Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        jPanel1.add(btnPay);
        btnPay.setBounds(100, 60, 120, 30);

        pnl1.add(jPanel1);
        jPanel1.setBounds(380, 70, 330, 100);

        getContentPane().add(pnl1);
        pnl1.setBounds(0, 0, 746, 470);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel);
        btnCancel.setBounds(330, 480, 90, 30);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-762)/2, (screenSize.height-555)/2, 762, 555);
    }// </editor-fold>//GEN-END:initComponents

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        // TODO add your handling code here:

        // System.out.println(model.getRowCount() + "inside all + data of currenet");
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);

        }
        currentPaymentReport(2);
    }//GEN-LAST:event_allActionPerformed

    private void curActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curActionPerformed
        // TODO add your handling code here:
        // System.out.println(model.getRowCount() + "insdie couff + data of All");
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        currentPaymentReport(1);
    }//GEN-LAST:event_curActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
        Student s = new Student();
        query = "SELECT fee FROM student_info WHERE studentId = '" + studentId + "'";
        fee = s.getFeeAmount(query);
        System.out.println(fee);
        query = "SELECT id,dpay,pamount,fstatus FROM fee WHERE studentId = '" + studentId + "' AND date_format(dpay,'%y%m') = date_format(now(),'%y%m') AND grade = '" + grade + "'";
        String data[] = s.validGetDataFeeSearch(query);
        s.Close();
        /*
        data[0] = id->int
         * data[1] = datepay ->date
         * data[2] = pamount -> float
         * data[3] = fee status -> sting
         */
        if (data != null) {
            if (data[3].equalsIgnoreCase("f")) {
                JOptionPane.showMessageDialog(this, "Current Month Fee has been already paid of \nName: " + nam + "\nGrade: " + grade);
            } else {
                if (updatePartialPay(Integer.valueOf(data[0]),data[1], Float.valueOf(data[2])) > 0) {

                    this.dispose();
                    new FeeOFIndAll(studentId, nam, grade).setVisible(true);
                }
            }
        } else {
            String[] buttons = {"Full", "Partial", "Cancel"};
            int result = JOptionPane.showOptionDialog(this, "Current Month Fee is not yet paid./nWant to pay now!!", "Fee Payment Section", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, buttons, buttons[0]);
            if (result == 0) {
                if (JOptionPane.showConfirmDialog(this, "Fee amount for " + nam + " is Rs. " + fee, "Full Fee Payment for Student " + nam, JOptionPane.INFORMATION_MESSAGE) == 0) {
                    int check = payCurrentFee("f", 0.0f);
                    if (check == 1) {
                        JOptionPane.showMessageDialog(this, "Fee of Student Named by " + nam + " of grade " + grade + " is paid");
                        this.dispose();
                        new FeeOFIndAll(studentId, nam, grade).setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error occured during insertion of values");
                    }
                }

            } else if (result == 1) {
                getPamount(nam, roll, grade);

            } else {
                JOptionPane.showMessageDialog(this, "Will be payed later on");
            }
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPrintActionPerformed
    {//GEN-HEADEREND:event_btnPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrintActionPerformed

    protected int updatePartialPay(int id, String date, float amount) {
        String pamount = JOptionPane.showInputDialog(this, "Current Month Fee of \nName: " + nam + "\nGrade: " + grade + " has been paid partially.\nRemaining Amount to pay is Rs. " + amount);
        String result = "";
        int report = 0;
        if (!pamount.equalsIgnoreCase("")) {
            float money = Float.parseFloat(pamount);
            if (money >= amount) {
                query = "UPDATE fee SET "
                        + "fstatus = 'f', "
                        + "pamount = '0.0', "
                        + "ldate = now() "
                        + "WHERE id = '" + id + "'";
                result = "Fee has been paid completely for student : " + nam + " of grade " + grade + ".\n Return Rs. " + (money - amount);
            } else {
                query = "UPDATE fee SET "
                        + "fstatus = 'p', "
                        + "pamount = '" + (amount - money) + "', "
                        + "ldate = now() "
                        + "WHERE id = '" + id + "'";
                result = "Rs. " + money + " has been paid of remaining amount " + amount + " for student : " + nam + " of grade " + grade + ".\n"
                        + "Pay the remaing Rs. " + (amount - money) + " soon";
            }
            Student s = new Student();
            report = s.feePayUpload(query);
            s.Close();
            if (report > 0) {
                JOptionPane.showMessageDialog(this, result);
            } else {
                JOptionPane.showMessageDialog(this, "Error in updating fee values.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pay Later!!");
        }
        return report;
    }

    protected void getPamount(String name, String roll, String grade) {
        float amount = 0.0f;
        String pamount = JOptionPane.showInputDialog(this, "Total Fee of Student " + name + " is Rs. " + fee + ".\n Please the money you want to pay for now!!");
        try {
            amount = Float.parseFloat(pamount);
            if (fee > amount) {
                int check = payCurrentFee("p", fee - amount);
                if (check == 1) {
                    JOptionPane.showMessageDialog(this, "Fee of Student Named by " + name + " of grade " + grade + " is paid.\n Please Return the Remainging Rs. " + String.valueOf(fee - amount) + " soon.");
                    this.dispose();
                    new FeeOFIndAll(studentId, nam, grade).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Error occured during insertion of values");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please entry again... given amount is bigger than actual fee amount");
                getPamount(name, roll, grade);
            }
        } catch (Exception e) {
            if (e.getMessage().equalsIgnoreCase("empty string")) {
                JOptionPane.showMessageDialog(this, "Message: Please Enter the amount");
                getPamount(name, roll, grade);
            } else if (e.getMessage().equalsIgnoreCase("null")) {
                JOptionPane.showMessageDialog(this, "Message: May Be Next time");
            } else {

                JOptionPane.showMessageDialog(this, "Error Message: " + e.getMessage());
                getPamount(name, roll, grade);
            }
        }
    }

    protected int payCurrentFee(String fstatus, float amount) {
        int status = 0;
        query = "INSERT INTO fee VALUES(null,'" + grade + "','" + fee + "','" + studentId + "','p',now(),'" + fstatus + "','" + amount + "',now())";
        Student s = new Student();
        status = s.feePayUpload(query);
        s.Close();
        return status;
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new FeeOFIndAll("", "", "").setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton all;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPrint;
    private javax.swing.JRadioButton cur;
    private javax.swing.JLabel header;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblid;
    private javax.swing.JLabel lblname;
    private javax.swing.JPanel pnl1;
    // End of variables declaration//GEN-END:variables
}
