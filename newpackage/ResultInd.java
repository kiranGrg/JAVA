package newpackage;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultInd.java
 *
 * Created on Aug 14, 2012, 2:54:05 PM
 */
/**
 *
 * @author kiranroma
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.util.Calendar;
import java.text.*;

public class ResultInd extends javax.swing.JFrame {

    private Connection con = null;
    private ResultSet rs = null;
    private String query = null;
    private Statement stm = null;
    private PreparedStatement pstm = null;
    private String studentId = null;
    private String validName = null;
    private Date[] date = null;
    private DateFormat d = new SimpleDateFormat("yyyy-mm-dd");
    private Calendar c = Calendar.getInstance();
    private String dateQ = null;
    private int[] id = null;
    private Student s = new Student();

    /** Creates new form ResultInd */
    public ResultInd() {
        initComponents();
        //String s = JOptionPane.showInputDialog(this, "please insert you name");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        pnl1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtroll = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbterm = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cmbgrade = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        rbTill = new javax.swing.JRadioButton();
        rbCurrent = new javax.swing.JRadioButton();
        lblexm = new javax.swing.JLabel();
        cmbexm = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/result1.png"))); // NOI18N
        jLabel1.setText("Result");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 553, 60);

        pnl1.setLayout(null);

        jLabel3.setText("Name:");
        pnl1.add(jLabel3);
        jLabel3.setBounds(10, 20, 40, 20);
        pnl1.add(txtname);
        txtname.setBounds(60, 10, 170, 30);

        jLabel4.setText("Roll No:");
        pnl1.add(jLabel4);
        jLabel4.setBounds(10, 70, 50, 20);
        pnl1.add(txtroll);
        txtroll.setBounds(60, 60, 90, 30);

        getContentPane().add(pnl1);
        pnl1.setBounds(20, 130, 240, 120);

        jLabel6.setText("Terms:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(410, 140, 50, 30);

        cmbterm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "First", "Secod", "Final" }));
        cmbterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbtermActionPerformed(evt);
            }
        });
        getContentPane().add(cmbterm);
        cmbterm.setBounds(460, 140, 80, 30);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(450, 280, 90, 30);

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(320, 280, 90, 30);

        cmbgrade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10" }));
        cmbgrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbgradeActionPerformed(evt);
            }
        });
        getContentPane().add(cmbgrade);
        cmbgrade.setBounds(320, 140, 80, 30);

        jLabel2.setText("Grade:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(270, 150, 50, 20);

        rbgroup.add(rbTill);
        rbTill.setText("Till This Year");
        rbTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTillActionPerformed(evt);
            }
        });
        getContentPane().add(rbTill);
        rbTill.setBounds(270, 80, 110, 23);

        rbgroup.add(rbCurrent);
        rbCurrent.setSelected(true);
        rbCurrent.setText("Current Year");
        rbCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCurrentActionPerformed(evt);
            }
        });
        getContentPane().add(rbCurrent);
        rbCurrent.setBounds(70, 80, 120, 23);

        lblexm.setText("Exam Held In:");
        lblexm.setEnabled(false);
        getContentPane().add(lblexm);
        lblexm.setBounds(360, 200, 100, 30);

        cmbexm.setEnabled(false);
        cmbexm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbexmActionPerformed(evt);
            }
        });
        getContentPane().add(cmbexm);
        cmbexm.setBounds(460, 200, 80, 30);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-569)/2, (screenSize.height-364)/2, 569, 364);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String report = "";

        String name = txtname.getText().trim();
        String roll = txtroll.getText().trim();
        String grade = (String) cmbgrade.getSelectedItem();
        if (!name.equals("") && !roll.equals("") && !grade.equalsIgnoreCase("select")) {
            validName = getName(name).trim();
            if (!validName.equals("")) {
                studentId = s.getValidation(validName, grade, Integer.parseInt(roll));
                if (!studentId.equals("")) {
                    if (rbCurrent.isSelected()) {
                        if (cmbterm.getSelectedIndex() != 0) {
                            int term = cmbterm.getSelectedIndex();
                            String termString = cmbterm.getSelectedItem().toString();
                            if (cmbterm.getSelectedIndex() != 3) {

                                query = "SELECT report FROM exam,examterm WHERE exam.id = examterm.id "
                                        + "AND studentId = '" + studentId + "' "
                                        + "AND term = '" + term + "' AND grade = '" + grade + "' AND date_format(date,'%y') = date_format(now(),'%y')";
                            } else {
                                query = "SELECT report FROM exam,examterm WHERE exam.id = examterm.id AND "
                                        + "studentId = '" + studentId + "' AND grade = '" + grade + "' "
                                        + "AND term = '" + term + "' AND date_format(date,'%y') = date_format('" + date[cmbexm.getSelectedIndex()] + "','%y')";
                            }

                            Student s = new Student();
                            report = s.getReportExam(query);
                            s.Close();
                            if (!report.equalsIgnoreCase("")) {
                                if (report.equalsIgnoreCase("p")) {
                                    if (cmbterm.getSelectedIndex() == 3) {
                                        Object[] options = {"OK", "Cancel"};
                                        int option = JOptionPane.showOptionDialog(this, name.toUpperCase() + " has passed " + termString + " grade " + grade + ".\nCongratulations!.\n"
                                                + "Would you like to upgrade to higher grade?", "Result", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                                        if (option == 0) {
                                            if (updategrade(studentId, cmbgrade.getItemAt(cmbgrade.getSelectedIndex() + 1).toString()) > 0) {
                                                JOptionPane.showMessageDialog(this, "Student's Record Has Been Updated To Grade " + cmbgrade.getItemAt(cmbgrade.getSelectedIndex() + 1).toString());

                                            }
                                            setValuesToDefault();
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, name.toUpperCase() + " is passed in " + termString + "term exam of grade " + grade + ".\nCongratulations!");
                                        setValuesToDefault();
                                    }
                                } else {
                                    if (cmbterm.getSelectedIndex() == 3) {
                                        Object[] options = {"OK", "Cancel"};
                                        int option = JOptionPane.showOptionDialog(this, name.toUpperCase() + " is failed in " + termString + " grade " + grade + ".\n"
                                                + "Would you like to update continuing the class?", "Result", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                                        if (option == 0) {
                                            if (updategrade(studentId, grade) > 0) {
                                                JOptionPane.showMessageDialog(this, "Student's Record Has Been Updated To Grade " + cmbgrade.getItemAt(cmbgrade.getSelectedIndex() + 1).toString()
                                                        + "\nStudy Hard This Time. Best Of Luck");

                                            }
                                            setValuesToDefault();
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, name.toUpperCase() + " is failed in " + termString + "term exam of grade " + grade + ".\nStudy Hard!");
                                        setValuesToDefault();
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "No Data Found. May be result is not published or uploaded to database!!");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Please Specify the Exam terms");
                        }
                    } else {
                        new ResultOFIndAll(studentId, validName).setVisible(true);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No Record Is Found of The given Info");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Provide The full Name. Please");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Provide Full Info. Thank You");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void rbCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCurrentActionPerformed
        // TODO add your handling code here:
        if (!cmbterm.isEnabled()) {
            cmbterm.setEnabled(true);


        }
    }//GEN-LAST:event_rbCurrentActionPerformed

    private void rbTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTillActionPerformed
        // TODO add your handling code here:
        cmbterm.setEnabled(false);
    }//GEN-LAST:event_rbTillActionPerformed

    private void cmbtermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbtermActionPerformed
    {//GEN-HEADEREND:event_cmbtermActionPerformed
        // TODO add your handling code here:
        if (cmbterm.getSelectedIndex() == 3) {
            if (cmbgrade.getSelectedIndex() != 0) {
                lblexm.setEnabled(true);

                setValueOfCmbexm();


            } else {

                cmbterm.setSelectedIndex(0);
                JOptionPane.showMessageDialog(this, "First Fill Up all The Info Required Please.");


            }
        }
    }//GEN-LAST:event_cmbtermActionPerformed

    private void cmbexmActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbexmActionPerformed
    {//GEN-HEADEREND:event_cmbexmActionPerformed
        // TODO add your handling code here:
        if (cmbexm.getSelectedIndex() >= 0) {
            Calendar c2 = Calendar.getInstance();
            c2.setTime(date[cmbexm.getSelectedIndex()]);


            if (String.valueOf(c.get(Calendar.YEAR)).equalsIgnoreCase(String.valueOf(c2.get(Calendar.YEAR)))) {
                c2.add(Calendar.YEAR, 1);
                dateQ = d.format(c2.getTime());


            } else {
                c.add(Calendar.YEAR, 1);
                c.add(Calendar.YEAR, -1);
                dateQ = d.format(c.getTime());
                System.out.println(dateQ);


            }

        }
    }//GEN-LAST:event_cmbexmActionPerformed

    private void cmbgradeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbgradeActionPerformed
    {//GEN-HEADEREND:event_cmbgradeActionPerformed
        // TODO add your handling code here:
        if (cmbexm.isEnabled()) {
            cmbterm.setSelectedIndex(0);
            int c = cmbexm.getItemCount();
            if (c > 0) {
                for (int i = c - 1; i
                        >= 0; i--) {
                    cmbexm.removeItemAt(i);


                }

            }
            cmbexm.setEnabled(false);
        }
    }//GEN-LAST:event_cmbgradeActionPerformed

    private void setValueOfCmbexm() {

        dbConnect db = new dbConnect();
        con = db.Connect();


        if (con != null) {
            try {
                String query1 = "SELECT date, YEAR(date), id FROM examterm WHERE grade = ? AND term = ?";
                pstm = con.prepareStatement(query1);
                pstm.setString(1, cmbgrade.getSelectedItem().toString());
                pstm.setInt(2, cmbterm.getSelectedIndex());
                rs = pstm.executeQuery();
                rs.last();
                date = new Date[rs.getRow()];
                id = new int[rs.getRow()];
                rs.beforeFirst();


                int i = 0;


                if (rs.next()) {

                    cmbexm.setEnabled(true);
                    date[i] = rs.getDate(1);
                    id[i] = rs.getInt(3);
                    cmbexm.addItem(rs.getString(2));
                    i++;

                } else {
                    JOptionPane.showMessageDialog(this, "Final Result Has Not Been Uploaded Yet.\nSorry.");
                    lblexm.setEnabled(false);
                    //cmbexm.setEnabled(false);


                }

            } catch (Exception e) {

                JOptionPane.showMessageDialog(this, "Error Message: " + e.getMessage());


            }
        } else {
            JOptionPane.showMessageDialog(this, "Error in Connection");


        }
    }

    private String getName(String name) {
        int len1 = 0, len2 = 0, i = 0, j = 0;
        String sname = "", s1 = "", s2 = "", s3 = "", s4 = "";


        i = name.indexOf(" ");


        if (i > 0) {
            len1 = name.length();
            s1 = name.substring(0, i);
            sname += s1 + " ";
            s2 = (name.substring(i, len1)).trim();

            j = s2.indexOf(" ");


            if (j > 0) {
                len2 = s2.length();
                s3 = s2.substring(0, j);
                sname += s3 + " ";
                s4 = (s2.substring(j, len2)).trim();
                sname += s4 + " ";


            } else {
                sname += s2;


            }
        }

        return (sname);


    }

    private int updategrade(String studentId, String grade) {
        int statusUpdate = 0, roll = 0;
        Student s = new Student();
        String query = "SELECT * FROM student_info WHERE studentId = '" + studentId + "' AND year = YEAR('" + dateQ + "')";
        boolean report = s.studentGroupSearchToTable(query);
        if (!report) {
            query = "SELECT max(id)+1 FROM student_info WHERE year = YEAR('" + dateQ + "') AND grade ='" + grade + "'";
            roll = s.getNewRoll(query);
            if (roll == 0) {
                JOptionPane.showMessageDialog(this, "Error During roll Calculation inside ResultInd.java : ");
            } else {
                query = "UPDATE student_info SET grade = '" + grade + "', fee = (SELECT amount FROM feeamount WHERE grade = '" + grade + "'), "
                        + "roll = '" + roll + "', year = YEAR ('" + dateQ + "') WHERE studentId = '" + studentId + "'";
                statusUpdate = s.feePayUpload(query);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Record is already been Updated. Thank You.");
        }
        s.Close();
        return statusUpdate;
    }

    private void setValuesToDefault() {
        int c = cmbexm.getItemCount();


        if (c > 0) {
            for (int i = c - 1; i
                    >= 0; i--) {
                cmbexm.removeItemAt(i);


            }

        }
        txtname.setText("");
        txtroll.setText("");
        cmbterm.setSelectedIndex(0);
        cmbgrade.setSelectedIndex(0);
        cmbexm.setEnabled(false);
        lblexm.setEnabled(false);


    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new ResultInd().setVisible(true);
//
//
//            }
//        });
//
//
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbexm;
    private javax.swing.JComboBox cmbgrade;
    private javax.swing.JComboBox cmbterm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblexm;
    private javax.swing.JPanel pnl1;
    private javax.swing.JRadioButton rbCurrent;
    private javax.swing.JRadioButton rbTill;
    private javax.swing.ButtonGroup rbgroup;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtroll;
    // End of variables declaration//GEN-END:variables
}
