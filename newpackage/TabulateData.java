package newpackage;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabulateData.java
 *
 * Created on Feb 17, 2012, 3:31:21 PM
 */
/**
 *
 * @author kiranroma
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

public final class TabulateData extends javax.swing.JFrame {
    
    private JTable table;
    private Object[][] data = null;
    private String[] columnNames = null;
    private DefaultTableModel modal = new DefaultTableModel();
    private String query = null;

    /** Creates new form TabulateData
     * @param query
     */
    public TabulateData(String title, String query) {
        initComponents();
        lbltitle.setText(title);
        this.query = query;
        getData();   //to get the value of data from resultset
        table = new JTable(modal);
        int v = ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;
        int h = ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;
        JScrollPane scrollPane = new JScrollPane(table, v, h);
        scrollPane.setBounds(5, 60, 1096, 250);
        table.setDragEnabled(false);
//        DefaultTableCellRenderer rightRenderer = table.getTableCellRenderComponent();
//        rightRenderer.setHorizontalAlignment( JLabel.RIGHT);
//        table.getColumnModel().getColumn(???).setCellRenderer( rightRenderer );
//
//        //table.setEnabled(false);

        scrollPane.setBackground(Color.GRAY);
        scrollPane.setForeground(Color.red);
        //Add the scroll pane to this panel.
        pnl.add(scrollPane);
        txtData.getDocument().addDocumentListener((DocumentListener) new MyDocumentListener(query));
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    }

    protected void getData() {
        CommonTabulateData td = new CommonTabulateData();
        columnNames = td.getColumnName(query);
        data = td.getTabulatedData(query, modal, cmbCat);
        td.Close();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        pnl = new javax.swing.JPanel();
        lbltitle = new javax.swing.JLabel();
        search = new javax.swing.JLabel();
        cmbCat = new javax.swing.JComboBox();
        txtData = new javax.swing.JTextField();

        setResizable(false);
        getContentPane().setLayout(null);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(550, 430, 80, 23);

        pnl.setLayout(null);

        lbltitle.setBackground(new java.awt.Color(204, 204, 204));
        lbltitle.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbltitle.setForeground(new java.awt.Color(51, 102, 255));
        lbltitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnl.add(lbltitle);
        lbltitle.setBounds(7, 5, 1090, 40);

        getContentPane().add(pnl);
        pnl.setBounds(0, 0, 1100, 370);

        search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        search.setText("Search By:");
        getContentPane().add(search);
        search.setBounds(50, 380, 90, 30);

        getContentPane().add(cmbCat);
        cmbCat.setBounds(160, 380, 120, 30);
        getContentPane().add(txtData);
        txtData.setBounds(330, 380, 180, 30);

        setBounds(100, 50, 1116, 496);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        MessageFormat headerFormat= new MessageFormat("Data Printed");
//        MessageFormat footerFormat = new  MessageFormat("Page {0}");
//        try{
//            table.print(JTable.PrintMode.FIT_WIDTH, headerFormat, footerFormat, true, null, false);
//        }
//        catch(Exception e){
//        
//        }

        new TablePreviewPrint(data, columnNames).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TabulateData("","",1).setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCat;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JPanel pnl;
    private javax.swing.JLabel search;
    private javax.swing.JTextField txtData;
    // End of variables declaration//GEN-END:variables

    class MyDocumentListener implements DocumentListener {

        private String queryedit = null;

        public MyDocumentListener(String query) {
            queryedit = query;
        }

        public void update(DocumentEvent de) {
            Document doc = de.getDocument();
            int length = doc.getLength();
            String str = null;
            try {
                str = doc.getText(0, length);

            } catch (BadLocationException ex) {
            }

            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/System","root","kiran");

                String queryCheck[] = queryedit.split(" WHERE ");
                if (queryCheck.length == 1) {
                    queryedit = queryedit + " WHERE " + (String) cmbCat.getSelectedItem() + " LIKE '" + str + "%'";
                } else if (queryCheck.length > 1) {
                    queryedit = queryedit + " AND " + (String) cmbCat.getSelectedItem() + " LIKE '" + str + "%'";
                }

                PreparedStatement pstm = con.prepareStatement(queryedit);
                ResultSet rs = pstm.executeQuery();
                queryedit = query;

                // This method resets the number of rows to 0(zero) thus giving an illusion of table refresh
                //getData();
                int no_cols = 0;
                int no_rows = 0;
                for (int j = modal.getRowCount() - 1; j >= 0; j--) {
                    modal.removeRow(j);
                }
                if (rs.next()) {
                    ResultSetMetaData metaData = rs.getMetaData();
                    no_cols = metaData.getColumnCount();
                    rs.last();
                    no_rows = rs.getRow();
                    //shifting the rs cursor before the begining

                    rs.beforeFirst();
                    data = new Object[no_rows][no_cols];
                    int i = 0;
                    Object obj[] = new Object[no_cols];
                    while (rs.next()) {
                        for (int j = 0; j < no_cols; j++) {

                            data[i][j] = rs.getObject(j + 1);
                            obj[j] = rs.getObject(j + 1);
                            System.out.println(rs.getObject(j + 1));
                        }
                        i++;
                        modal.addRow(obj);
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error in Database : " + e, "Display", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Unidentified Error : " + e, "Display", JOptionPane.INFORMATION_MESSAGE);
            }
            finally{
                try{
                    if(con != null){
                        con.close();
                    }
                }catch(Exception e){}
            }

        }

        public void changedUpdate(DocumentEvent de) {
            // text was changed
            update(de);

        }

        public void removeUpdate(DocumentEvent de) {
            update(de);
        }

        public void insertUpdate(DocumentEvent de) {
            update(de);
        }
    }
}
